@attribute [Microsoft.AspNetCore.Components.RouteAttribute(ConstantsUrl.VoitureIndex)]
@inject IVoitureService VoitureService
@inject NavigationManager NavManager
@inject NotifierTitleService NotifierTitle
@inject HttpClient Http
@using BlazorTable

@if (voitureViewModel == null)
{
    <div class="spinner"></div>
}
else
{
    <button class="btn btn-sm btn-danger" title="Toggle Edit Mode" @onclick="@((x) => ToggleEdit())">Toggle Edit Mode</button>

    <BlazorTable.Table class="table table-dark" TableHeadClass="thead-dark" @ref="Table" TableItem="VoitureViewModel" Items="voitureViewModel" PageSize="12">
        <BlazorTable.Column TableItem="VoitureViewModel" Title="Demandeur" Field="@(x => x.PersonneViewModel)" Sortable="true" Filterable="true" Width="20%" />
        <BlazorTable.Column TableItem="VoitureViewModel" Title="Voiture" Field="@(x => x.TypeVoiture)" Sortable="true" Filterable="true" Width="20%">
            <EditTemplate>
                <RadzenDropDown Data="voitureList"
                                Value="@context.TypeVoiture"
                                TValue="String"
                                AllowClear="true"
                                AllowFiltering="true"
                                Style="width:100%"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                ValueProperty="name"
                                TextProperty="name"
                                ValueChanged="@((x) => Change(x, context))">
                </RadzenDropDown>
            </EditTemplate>
        </BlazorTable.Column>
        <BlazorTable.Pager ShowPageNumber="true" ShowTotalCount="true" />
    </BlazorTable.Table>
}

@code {
    private VoitureGta[] voitureList;
    private VoitureViewModel[] voitureViewModel;
    private ITable<VoitureViewModel> Table;


    protected ConfirmBase deleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await NotifierTitle.Update(Lost.SharedLib.Constants.TitleTransactionIndex);

        voitureViewModel = await VoitureService.GetAllAsync();
        voitureList = await Http.GetJsonAsync<VoitureGta[]>("vehicles.json");
        StartTimer();
    }

    private void ToggleEdit()
    {
        Table.ToggleEditMode();
    }

    private void Change(object value, VoitureViewModel model)
    {
        if (value == null)
        {
            value = string.Empty;
        }
        model.TypeVoiture = value.ToString();
        Task.Run(async () => await VoitureService.AddOrUpdateAsync(model)).Wait();
    }

    private class VoitureGta
    {
        public string name { get; set; }
        public string type { get; set; }
        public override string ToString()
        {
            return name;
        }
    }


    private static System.Timers.Timer aTimer;

    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        var reloadVoitureViewModel = await VoitureService.GetAllAsync();
        bool diff = false;

        foreach(VoitureViewModel vvm in reloadVoitureViewModel)
        {
            var actuallVvm = voitureViewModel.First(v => v.Id == vvm.Id);
            if(vvm.TypeVoiture != actuallVvm.TypeVoiture)
            {
                diff = true;
            }
        }

        if(diff)
        {
            voitureViewModel = reloadVoitureViewModel;
            await InvokeAsync(StateHasChanged);
        }
    }
}